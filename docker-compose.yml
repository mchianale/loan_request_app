services:
# Zookeeper & kafka
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181"
    networks:
      - kafkanet
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka-0:
    image: bitnami/kafka:latest
    container_name: kafka-0
    restart: always
    expose:
      - 9092
    ports:
      - "29092:29092"
    networks:
      - kafkanet
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-0:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    volumes:
      - kafka_0_data:/bitnami/kafka
    depends_on:
      - zookeeper

  kafka-1:
    image: bitnami/kafka:latest
    container_name: kafka-1
    expose:
      - 9092
    ports:
      - "29093:29093"
    networks:
      - kafkanet
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:29093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-1:9092,EXTERNAL://localhost:29093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    volumes:
      - kafka_1_data:/bitnami/kafka
    depends_on:
      - zookeeper

  kafka-2:
    image: bitnami/kafka:latest
    container_name: kafka-2
    expose:
      - 9092
    ports:
      - "29094:29094"
    networks:
      - kafkanet
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:29094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-2:9092,EXTERNAL://localhost:29094
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    volumes:
      - kafka_2_data:/bitnami/kafka
    depends_on:
      - zookeeper

# logstash
  logstash:
    container_name: logstash
    build:
      context: .
      dockerfile: logstash/Dockerfile.logstash
    restart: always
    environment:
     LS_JAVA_OPTS: "-Xmx256m -Xms256m"
     ELASTICSEARCH_USERNAME: ${ELASTIC_USERNAME}
     ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
     XPACK_MONITORING_ELASTICSEARCH_USERNAME: ${ELASTIC_USERNAME}
     XPACK_MONITORING_ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
     XPACK_MONITORING_ELASTICSEARCH_HOSTS: "elasticsearch:9200"
     XPACK_MONITORING_ENABLED: "true"
     KAFKA_BROKERS: ${KAFKA_BROKERS}
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - kafkanet
      - elk-network

# elastic search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-u", "elastic:${ELASTIC_PASSWORD}", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "1"
    #       memory: 2g
    networks:
      - elk-network
    
# kibana 
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_SERVICEACCOUNTTOKEN=${ELASTICSEARCH_SERVICEACCOUNTTOKEN}
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2g
    networks:
      - elk-network

# Celery
  kredis:
    container_name: kredis
    image: redis:latest
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - kredis_data:/data
    ports:
      - "6379:6379"
    networks:
      - celery-network

  krabbitmq:
    container_name: krabbitmq
    image: rabbitmq:latest
    restart: always
    volumes:
      - "./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf"
      - krabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
    networks:
      - celery-network
  
  celery-app:
    container_name: celery-app
    build:
      context: .
      dockerfile: celeryApp/Dockerfile.celeryApp
    restart: always
    environment:
      # kafka
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      # redis
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_CELERY_DB_INDEX: ${REDIS_CELERY_DB_INDEX}
      # rabbitmq
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      # topics to consume (trigger)
      LOAN_TOPIC: ${LOAN_TOPIC}
      CREDIT_CHECK_URL: ${CREDIT_CHECK_URL}
      PROPERTY_CHECK_URL: ${PROPERTY_CHECK_URL}
      DECISION_URL: ${DECISION_URL}
      NOTIFICATION_URL: ${NOTIFICATION_URL}
      UPDATE_LOAN_URL: ${UPDATE_LOAN_URL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

    stdin_open: true
    tty: true
    depends_on:
      - krabbitmq
      - kredis
      - kafka-0
      - kafka-1
      - kafka-2
      - loan-notification-service
    networks:
      - celery-network
      - kafkanet

# user backend service
  user-backend-service:
    container_name: user-backend-service
    build:
        context: .
        dockerfile: userBackEnd/Dockerfile.userBackEnd
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      # topics to produce
      LOAN_TOPIC: ${LOAN_TOPIC}
      # safe udpate loan
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    stdin_open: true
    tty: true
    ports:
      - "8000:8000"
    depends_on:
      - mongodb
      - kafka-0
      - kafka-1
      - kafka-2
    
    networks:
      - mongodb-network
      - kafkanet
      - celery-network
      - app-network

# credit check backend service
  credit-check-app-service:
    container_name: credit-check-app-service
    build:
        context: .
        dockerfile: creditCheckApp/Dockerfile.creditCheckApp
    restart: always
    stdin_open: true
    tty: true
    ports:
      - "8001:8001"
    depends_on:
      - celery-app
    networks:
      - celery-network
      - app-network

# property check backend service
  property-check-app-service:
    container_name: property-check-app-service
    build:
        context: .
        dockerfile: propertyCheckApp/Dockerfile.propertyCheckApp
    restart: always
    stdin_open: true
    tty: true
    ports:
      - "8002:8002"
    depends_on:
      - celery-app
    networks:
      - celery-network
      - app-network

# decision backend service
  decision-app-service:
    container_name: decision-app-service
    build:
        context: .
        dockerfile: decisionApp/Dockerfile.decisionApp
    restart: always
    stdin_open: true
    tty: true
    ports:
      - "8003:8003"
    depends_on:
      - celery-app
    networks:
      - celery-network
      - app-network
# notifier
  loan-notification-service:
    container_name: loan-notification-service
    build:
        context: .
        dockerfile: loanNotificationApp/Dockerfile.loanNotificationApp
    restart: always
    environment:
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
    stdin_open: true
    tty: true
    ports:
      - "8004:8004"
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2

    networks:
      - kafkanet
      - app-network
      - celery-network

# MongoDB Database
  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db #mongodb_data:/mongoDB/${DATABASE_NAME}
      - ./mongoDB/mongo_config/mongod.conf:/etc/mongo/mongod.conf
    command: [ "mongod", "--config", "/etc/mongo/mongod.conf" ]
    networks:
      - mongodb-network

# NETWORK & VOLUMES
networks:
  # private only users api can manage it
  mongodb-network:
    name: mongodb-network
    internal: true  
    driver: bridge 
  # access by all users
  app-network:
    name: app-network
  # acces public but need auth, ELK for admin
  elk-network:
    name: elk-network
  # zookeeper - kafka - logstash - main app & celery service
  kafkanet:
    internal: true
    name: kafkanet
  # celery
  celery-network:
    name: celery-network
    internal: true

volumes:
  mongodb_data:   
    name: mongodb_data
  zookeeper_data:
    name: zookeeper_data
  kafka_0_data:
    name: kafka_0_data
  kafka_1_data:
    name: kafka_1_data
  kafka_2_data:
    name: kafka_2_data
  user_mongo_data:
    name: user_mongo_data
  elasticsearch_data:
    name: elasticsearch_data
  kredis_data:
    name: kredis_data
  krabbitmq_data:
    name: krabbitmq_data